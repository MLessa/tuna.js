<formatedTextField>

    <div id={state.inputContainerID}></div>

    <script>
        import textField from './textField.riot';
        import * as riot from 'riot';
        import { defaultInputMethods } from '../util.js';


        export default {
            onMounted(props, state) {
                let inputComponent = riot.component(textField)(document.querySelector(`#${state.inputContainerID}`), props);

                const el = this.$(`#${state.inputContainerID} input`);

                this.update({
                    inputComponent,
                    mask: new Mask(el, props.pattern)
                });
            },
            getValue() {
                return this.state.inputComponent.getValue();
            },
            ...defaultInputMethods,
            setValue(value) {
                this.state.inputComponent.setValue(value);
                this.state.mask.masking();
            }
        }

        // The Mask class was inspired by https://github.com/lagden/mask //
        const map = new Map()
        map.set('9', /\d/)
        map.set('A', /[\da-zA-Z]/)
        map.set('S', /[a-zA-Z]/)

        const instances = new Map()

        const GUID = Symbol('GUID')
        const EVENT = Symbol('EVENT')
        class Mask {
            static data(input) {
                return instances.has(input[GUID]) && instances.get(input[GUID])
            }

            constructor(input, mask = '', keyEvent = 'input') {
                if (input instanceof HTMLInputElement === false) {
                    throw new TypeError('The input should be a HTMLInputElement')
                }

                // Check if element has an instance
                const instance = Mask.data(input)
                if (instance instanceof Mask) {
                    return instance
                }

                this.input = input
                this.mask = input.dataset.mask || mask

                // Check if has mask
                if (this.mask.length === 0) {
                    throw new Error('The mask can not be empty')
                }

                // Listener
                this[EVENT] = keyEvent
                this.input.addEventListener(this[EVENT], this)

                // Storage instance
                this.input[GUID] = `${Math.random()}_${Date.now()}`
                instances.set(this.input[GUID], this)
            }
            
            static masking(_value, _mask) {
                const value = String(_value).replace(/[^\da-zA-Z]/g, '')

                let mask;

                if (Array.isArray(_mask)) {
                    let minimunLength = 99999999;
                    let maximunLength = -9999999;
                    let maskMaximunIndex = 0;
                    _mask.forEach((pattern, key) => {
                        let pLength = String(pattern).replace(/[^\da-zA-Z]/g, '').length;
                        if (pLength > maximunLength) {
                            maximunLength = pLength;
                            maskMaximunIndex = key;
                        }
                        if (value.length <= pLength && pLength < minimunLength) {
                            mask = pattern;
                            minimunLength = pLength;
                        }
                    });
                    if (!mask)
                        mask = _mask[maskMaximunIndex];
                } else {
                    mask = String(_mask)
                }

                const res = []
                let cc = 0

                for (let i = 0; i < mask.length; i++) {
                    const char = mask.charAt(i)
                    if (value.length > cc) {
                        if (map.has(char)) {
                            if (map.get(char).test(value.charAt(cc))) {
                                res.push(value.charAt(cc++))
                            } else {
                                break
                            }
                        } else {
                            res.push(char)
                        }
                    }
                }

                return res.join('')
            }

            masking(event) {
                /* istanbul ignore next */
                if (event && event.inputType === 'deleteContentBackward') {
                    return false
                }

                this.input.value = Mask.masking(this.input.value, this.mask)
            }

            destroy() {
                this.input.removeEventListener(this[EVENT], this)
                if (instances.has(this.input[GUID])) {
                    instances.delete(this.input[GUID])
                }
            }

            handleEvent(event) {
                this.masking(event)
            }
        }
    </script>

</formatedTextField>